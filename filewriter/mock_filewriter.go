// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/frasnym/go-file-writer-example/filewriter (interfaces: FileWriter)

// Package filewriter is a generated GoMock package.
package filewriter

import (
	bufio "bufio"
	fs "io/fs"
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileWriter is a mock of FileWriter interface.
type MockFileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFileWriterMockRecorder
}

// MockFileWriterMockRecorder is the mock recorder for MockFileWriter.
type MockFileWriterMockRecorder struct {
	mock *MockFileWriter
}

// NewMockFileWriter creates a new mock instance.
func NewMockFileWriter(ctrl *gomock.Controller) *MockFileWriter {
	mock := &MockFileWriter{ctrl: ctrl}
	mock.recorder = &MockFileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileWriter) EXPECT() *MockFileWriterMockRecorder {
	return m.recorder
}

// BufferedFlush mocks base method.
func (m *MockFileWriter) BufferedFlush(arg0 *bufio.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferedFlush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BufferedFlush indicates an expected call of BufferedFlush.
func (mr *MockFileWriterMockRecorder) BufferedFlush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferedFlush", reflect.TypeOf((*MockFileWriter)(nil).BufferedFlush), arg0)
}

// BufferedWriteString mocks base method.
func (m *MockFileWriter) BufferedWriteString(arg0 *bufio.Writer, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferedWriteString", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BufferedWriteString indicates an expected call of BufferedWriteString.
func (mr *MockFileWriterMockRecorder) BufferedWriteString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferedWriteString", reflect.TypeOf((*MockFileWriter)(nil).BufferedWriteString), arg0, arg1)
}

// CreateFile mocks base method.
func (m *MockFileWriter) CreateFile(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileWriterMockRecorder) CreateFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileWriter)(nil).CreateFile), arg0)
}

// FileClose mocks base method.
func (m *MockFileWriter) FileClose(arg0 *os.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FileClose indicates an expected call of FileClose.
func (mr *MockFileWriterMockRecorder) FileClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileClose", reflect.TypeOf((*MockFileWriter)(nil).FileClose), arg0)
}

// FileWrite mocks base method.
func (m *MockFileWriter) FileWrite(arg0 *os.File, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileWrite", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileWrite indicates an expected call of FileWrite.
func (mr *MockFileWriterMockRecorder) FileWrite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileWrite", reflect.TypeOf((*MockFileWriter)(nil).FileWrite), arg0, arg1)
}

// FileWriteString mocks base method.
func (m *MockFileWriter) FileWriteString(arg0 *os.File, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileWriteString", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileWriteString indicates an expected call of FileWriteString.
func (mr *MockFileWriterMockRecorder) FileWriteString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileWriteString", reflect.TypeOf((*MockFileWriter)(nil).FileWriteString), arg0, arg1)
}

// NewBufferedWriter mocks base method.
func (m *MockFileWriter) NewBufferedWriter(arg0 *os.File) *bufio.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBufferedWriter", arg0)
	ret0, _ := ret[0].(*bufio.Writer)
	return ret0
}

// NewBufferedWriter indicates an expected call of NewBufferedWriter.
func (mr *MockFileWriterMockRecorder) NewBufferedWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBufferedWriter", reflect.TypeOf((*MockFileWriter)(nil).NewBufferedWriter), arg0)
}

// OpenFile mocks base method.
func (m *MockFileWriter) OpenFile(arg0 string, arg1 int, arg2 fs.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockFileWriterMockRecorder) OpenFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockFileWriter)(nil).OpenFile), arg0, arg1, arg2)
}
